shared_future可以多次get，复制语义******************
Vs、future的move语义

#include <iostream>
#include<thread>
#include<future>
#include<mutex>
using namespace std;

int myPrint(int num) {
	cout << "-----我的线程开始-----" << this_thread::get_id() << endl;
	cout << num << endl;

	this_thread::sleep_for(chrono::seconds(5));

	cout << "-----我的线程结束-----" << this_thread::get_id() << endl;
	return 5;
}



int main()
{
	cout << "主线程" << this_thread::get_id() << endl;

	packaged_task<int(int)> mytask(myPrint);//托管
	
	thread th(ref(mytask), 200);
	//注意ref语义,相当于直接调用myPrint

	th.join();

	future<int>result = mytask.get_future();

	bool isvalid = result.valid();
	cout << "result:" << isvalid << endl;

	shared_future <int> result_s(move(result));
	/*
	注意：构造函数传参
	可以直接放入mytask.get_future();
	或者由future的移动语义：
	move(result) 等于 result.shared()*/


	isvalid = result.valid();
	cout << "result:" << isvalid<<endl;

	cout << "我的线程返回：" << result_s.get() << endl;
	cout << "我的线程返回：" << result_s.get() << endl;


	cout << "主线程结束" << this_thread::get_id() << endl;

	return 0;
}


输出窗口：******************
主线程15244
-----我的线程开始-----15236
200
-----我的线程结束-----15236
result:1
result:0
我的线程返回：5
我的线程返回：5
主线程结束15244






future函数的对象在等你呢子线程*****************

#include <iostream>
#include<thread>
#include<future>
#include<mutex>
using namespace std;


int myPrint() {
	cout << "-----我的线程开始-----" << this_thread::get_id() << endl;
	this_thread::sleep_for(chrono::seconds(5));

	cout << "-----我的线程结束-----" << endl;
	return 5;
}


int main()
{
	cout << "主线程" << this_thread::get_id() << endl;

	//异步线程拿到结果
	future<int>result = async(myPrint); 
	/*	加上launch::deferred，满足第三个判断	*/

	future_status st = result.wait_for(chrono::seconds(1));
	//result对象等若干秒，子线程是否返回？
	if (st == future_status::ready) {
		cout << "子线程返回值：" << result.get() << endl;
	}
	else if (future_status::timeout == st) {
		cout << "子线程返回超时" << endl;
	}
	else if (future_status::deferred == st) {
		cout << "没有子线程，只有推迟的主线程的函数调用：" << result.get() << endl;
	}


	cout << "主程序完毕！！！";//最后执行这句
	return 0;
}

输出窗口：
主线程8672
-----我的线程开始-----16168
子线程返回超时
主程序完毕！！！-----我的线程结束-----