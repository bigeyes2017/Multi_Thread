    #include "server.h"    

    #include <Winsock.h>
    #pragma comment(lib,"ws2_32.lib")

    #include <stdlib.h>
    #include <string>
    #include<mutex>
    #include <iostream>
    using namespace std;
    
    int main()
    {
        //打开网络库
        WORD wdVersion = MAKEWORD(2, 2);
        WSADATA wdSockMsg;

        int wres = WSAStartup(wdVersion, &wdSockMsg);

        if (0 != wres) {
            switch (wres)
            {
            case WSASYSNOTREADY:
                cout << "系统配置问题，请检查ws2_32.lib是否在工作目录" << endl;
                break;
            case WSAVERNOTSUPPORTED:
                cout << "服务器：网络库版本号不支持" << endl;
                break;
            case WSAEINPROGRESS:
                cout << "服务器忙" << endl;
                break;
            case WSAEPROCLIM:
                cout << "Windows套接字实现所支持的任务数量已达到限制。请关闭不必要软件" << endl;
                break;
            case WSAEFAULT:
                cout << "服务器：网络库启动第二个参数错了" << endl;
                break;
            default:
                break;
            }

            return 0;
        }
        //检测版本
        if (2 != LOBYTE(wdSockMsg.wVersion) || 2 != HIBYTE(wdSockMsg.wVersion)) {

            WSACleanup();
            return 0;
        }

        //创建socket
        SOCKET sockServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

        if (INVALID_SOCKET == sockServer) {
            int a = WSAGetLastError();  //0--success
            cout << "服务器：创建socket失败：" << a << endl;

            WSACleanup();
            return 0;
        }

        //绑定服务器socket

        SOCKADDR_IN sAddr;
        sAddr.sin_family = AF_INET;
        sAddr.sin_port = htons(12345);
        sAddr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");
        /*sAddr.sin_addr.S_un.S_un_b.s_b1 = 127;
        sAddr.sin_addr.S_un.S_un_b.s_b2 = 0;
        sAddr.sin_addr.S_un.S_un_b.s_b3 = 0;
        sAddr.sin_addr.S_un.S_un_b.s_b4 = 1;*/
        //inet_pton()
        int bres = bind(sockServer, (const SOCKADDR*)&sAddr, sizeof(sAddr));
        if (SOCKET_ERROR == bres) {
            int a = WSAGetLastError();

            cout << "服务器：bind失败：" << a << endl;

            closesocket(sockServer);
            WSACleanup();
            return 0;
        }

        //监听

        int lres = listen(sockServer, SOMAXCONN);

        if (SOCKET_ERROR == lres) {
            int a = WSAGetLastError();

            cout << "服务器：listen失败(无法获得用户连接)：" << a << endl;

            closesocket(sockServer);
            WSACleanup();
            return 0;
        }
        cout << "服务器端已启动..." << endl;


        SockArray thrdSock(sockServer);        

        Vt myTs;

        thrdSock.dealAcceptRecv(myTs);

        cout << "总共发送几次：" << endl;
        int num;  cin >> num;
        myTs.push_back(thread(&SockArray::dealSend,&thrdSock,num));
        //注意，此处传引用。第二个参数。否则对应的那边应该有赋值构造函数。
     
   
        thrdSock.closeSock();
        //FD_ZERO(&allsocks);
        for (thread& temp : myTs) {
            temp.join();
        }

        closesocket(sockServer);
        WSACleanup();
        return 0;
    }

    void SockArray::dealAcceptRecv(Vt & myTs) {
        while (gono) {
            timeval wait{ 3,0 };

            mut.lock();
            fd_set temp = allsocks;
            mut.unlock();

            int se_Res = select(0, &temp, NULL, NULL, &wait);

            if (0 >= se_Res)    continue;
            else
            {
                for (u_int i = 0; i < temp.fd_count; i++)
                {                   
                    if (temp.fd_array[i] == server) {
                        //接收新客户端,不带地址信息
                        myTs.push_back( thread(&SockArray::dealA,this));                        
                    }
                    else {  //处理recv
                        myTs.push_back(thread(&SockArray::dealR, this, temp.fd_array[i]));
                    }
                }//for
            }
        }


    }
    void SockArray::dealA() {
        SOCKET sockClient = accept(server, NULL, NULL);
        if (sockClient == INVALID_SOCKET) {

            cout << "服务器：无法连接客户端" << endl;
        }
        else
        {
            // 互斥操作
            insertClient(sockClient);
            cout << "服务器：置入" << sockClient << endl;
        }
    }
    void SockArray::dealR(SOCKET tempsock) {

        char buf[1500] = { 0 };

        int rRes = recv(tempsock, buf, sizeof(buf) - 1, 0);
        if (SOCKET_ERROR == rRes) { /*可能需要关闭链接*/
            int a = WSAGetLastError();
            cout << "服务器：" << tempsock << "recv错误" << a << endl;
        }
        else if (0 == rRes) {       /*正常关闭连接*/
            cout << "服务器：客户端退出" << endl;

            closesocket(tempsock);
            FD_CLR(tempsock, &allsocks);
        }
        else
        {
            cout << "服务器收到（" << rRes << "）:" << buf << endl;
        }

    }
    void SockArray::insertClient(SOCKET s) {

        mut.lock();
        FD_SET(s, &allsocks);
        mut.unlock();

    }
    void SockArray::closeSock() {
        for (u_int i = 0; i < allsocks.fd_count; i++)
        {
            closesocket(allsocks.fd_array[i]);
        }
    }

    void SockArray::dealSend(int n) {    //仅是读出
       
        for (int  i = 0; i < n; i++)
        {
            cout << "第"<<i+1<<"次发送内容：" << endl;
            string str;        getline(cin, str);
            this_thread::sleep_for(5s);

            mut.lock();
            fd_set temp = allsocks;
            mut.unlock();

            timeval wait{ 0,0 };
            int se_Res = select(0, NULL, &temp, NULL, &wait);

            for (u_int i = 0; i < allsocks.fd_count; i++)
            {
                SOCKET tempsock = temp.fd_array[i];
                if (tempsock != server) {
                    int sRes = send(tempsock, str.c_str(), str.size(), 0);

                    if (SOCKET_ERROR == sRes) {
                        int a = WSAGetLastError();
                        cout << "服务器send错误:" << a << endl;
                        i--;
                    }
                }
            }
        }
        
    }