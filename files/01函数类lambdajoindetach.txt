#include <iostream>
#include<thread>
using namespace std;


void myPrint() {
	cout << "-----我的线程开始-----" << endl;
	cout << "我的线程2" << endl; 
	cout << "我的线程3" << endl;
	cout << "我的线程4" << endl;
	/*
	
	*/
	cout << "-----我的线程结束-----" << endl;

}


class MyClass
{
public:
	MyClass() {
		cout << "1构造函数执行" << endl;
	}
	MyClass(const MyClass& othr) {
		cout << "2拷贝构造函数执行" << endl;
	}

	void operator()() {
		cout << "-----我的线程operator()开始-----" << endl;
		/*

		*/
		cout << "-----我的线程operator()结束-----" << endl;
	}
	~MyClass() {
		cout << "析构函数被执行" << endl;
	}
};

int main()
{
	cout << "主线程开始" << endl;


	thread mytObj(myPrint);

	//判断是否可以join或detach
	if (mytObj.joinable()) {	
		cout << "1::joinable:True" << endl;
	}
	else {
		cout << "1::joinable:False" << endl;
	}


	//mytObj.join();

	mytObj.detach();

	if (mytObj.joinable()) {
		cout << "2::joinable:True"<< endl;
	}
	else {
		cout << "2::joinable:False" << endl;
	}

	/*其他可调用对象创建进程并执行*/
	MyClass cla;
	thread mytObj2(cla);

	mytObj2.join();
	//脱离有风险：引用可能失去引用值，指针可能失去对象，因为主函数给的参数是局部变量。

	
	auto mylambda = [] {
		cout << "-------我的线程3开始-----" << endl;
		/*	*/
		cout << "-------我的线程3结束-----" << endl;
	};
	thread mytObj3(mylambda);

	mytObj3.join();

	cout << "主线程完毕,并收尾！！" << endl;

    return 0;
}
